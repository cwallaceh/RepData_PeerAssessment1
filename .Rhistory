Covariable = Ancova$X
Tratamiento = as.factor(Ancova$proveedor)
Data =data.frame(Tratamiento, Covariable, Variable)
plot(Variable,Covariable)
library(car)
library(effects)
results = lm(Variable ~ Tratamiento + Covariable, data=Data)
Anova(results, type = 3)
anova(results)
results = lm(Variable ~ Tratamiento + Covariable, data=Data)
Anova(results, type = 3)
adjusted <- effect("Tratamiento",results)
adjusted
?effect
adjusted <- effect(Tratamiento,results)
adjusted <- effect("Tratamiento",results)
adjusted
Ancova <- read.table("C:/Users/dibujoatm/Dropbox/R/Ancova.txt", header=T)
Variable = Ancova$Y
Covariable = Ancova$X
Tratamiento = as.factor(Ancova$proveedor)
Data =data.frame(Tratamiento, Covariable, Variable)
plot(Variable,Covariable)
library(car)
library(effects)
results = lm(Variable ~ Tratamiento + Covariable, data=Data)
Anova(results, type = 3)
#Adjusted means
adjusted <- effect("Tratamiento",results)
Bloqueo <- read.table("C:/Users/dibujoatm/Dropbox/R/Bloqueo.txt", header=T)
Respuesta = Bloqueo$desgaste
Bloque = Bloque$carro
Tratamiento = as.factor(Bloqueo$marca)
Data =data.frame(Tratamiento, Bloque, Respuesta)
plotmeans(Respuesta ~ Tratamiento, data=Data, main="Main Effects Plot (Data Means)")
Bloqueo <- read.table("C:/Users/dibujoatm/Dropbox/R/Bloqueo.txt", header=T)
Respuesta = Bloqueo$desgaste
Bloque = Bloqueo$carro
Tratamiento = as.factor(Bloqueo$marca)
Data =data.frame(Tratamiento, Bloque, Respuesta)
plotmeans(Respuesta ~ Tratamiento, data=Data, main="Main Effects Plot (Data Means)")
anova = aov(Respuesta ~ Tratamiento + Bloque, data=Data)
summary(anova)
Anova(anova, type = 3)
results = lm(Respuesta ~ Tratamiento + Bloque, data=Data)
Anova(anova, type = 3)
Data =data.frame(Tratamiento, Bloque, Respuesta)
View(Data)
Bloqueo <- read.table("C:/Users/dibujoatm/Dropbox/R/Bloqueo.txt", header=T)
Respuesta = Bloqueo$desgaste
Bloque = Bloqueo$carro
Tratamiento = as.factor(Bloqueo$marca)
Data =data.frame(Tratamiento, Bloque, Respuesta)
plotmeans(Respuesta ~ Tratamiento, data=Data, main="Main Effects Plot (Data Means)")
Bloqueo <- read.table("C:/Users/dibujoatm/Dropbox/R/Bloqueo.txt", header=T)
Respuesta = Bloqueo$desgaste
Bloque = Bloqueo$carro
Tratamiento = as.factor(Bloqueo$marca)
Data =data.frame(Bloque, Tratamiento, Respuesta)
plotmeans(Respuesta ~ Tratamiento, data=Data, main="Main Effects Plot (Data Means)")
results = lm(Respuesta ~ Tratamiento + Bloque, data=Data)
anova(results)
Bloqueo <- read.table("C:/Users/dibujoatm/Dropbox/R/Bloqueo.txt", header=T)
Respuesta = Bloqueo$desgaste
Bloque = Bloqueo$carro
Tratamiento = as.factor(Bloqueo$marca)
Data = data.frame(Bloque, Tratamiento, Respuesta)
View(Data)
Bloqueo <- read.table("C:/Users/dibujoatm/Dropbox/R/Bloqueo.txt", header=T)
Respuesta = Bloqueo$desgaste
Bloque = as.factor(Bloqueo$carro)
Tratamiento = as.factor(Bloqueo$marca)
Data = data.frame(Bloque, Tratamiento, Respuesta)
plotmeans(Respuesta ~ Tratamiento, data=Data, main="Main Effects Plot (Data Means)")
results = lm(Respuesta ~ Tratamiento + Bloque, data=Data)
anova(results)
Latino <- read.table("C:/Users/dibujoatm/Dropbox/R/Latino.txt", header=T)
Respuesta = Latino$desgaste
Bloque1 = as.factor(Latino$carro) #IMPORTANTE PONER EL BLOQUE COMO FACTOR!!!
Bloque2 = as.factor(Latino$posicion) #IMPORTANTE PONER EL BLOQUE COMO FACTOR!!!
Tratamiento = as.factor(Latino$marca)
Data = data.frame(Bloque1, Tratamiento, Bloque2, Respuesta)
plotmeans(Respuesta ~ Tratamiento, data=Data, main="Main Effects Plot (Data Means)")
Latino <- read.table("C:/Users/dibujoatm/Dropbox/R/Latino.txt", header=T)
Respuesta = Latino$desgaste
Bloque1 = as.factor(Latino$carro) #IMPORTANTE PONER EL BLOQUE COMO FACTOR!!!
Bloque2 = as.factor(Latino$posicion) #IMPORTANTE PONER EL BLOQUE COMO FACTOR!!!
Tratamiento = as.factor(Latino$marca)
Data = data.frame(Bloque1, Tratamiento, Bloque2, Respuesta)
View(Data)
results = lm(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)
anova(results)
plot(TukeyHSD(results))
results = lm(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)
anova(results)
plot(TukeyHSD(aov(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)))
results = lm(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)
anova(results)
plot(TukeyHSD(aov(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)),"results")
plot(TukeyHSD(aov(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)),"Bloque2")
results = lm(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)
anova(results)
plot(TukeyHSD(aov(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)),"Bloque2")
plot(TukeyHSD(aov(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)),Bloque2)
plot(TukeyHSD(aov(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)))
results = lm(Respuesta ~ Tratamiento + Bloque1 + Bloque2, data=Data)
anova(results)
Grecolatino <- read.table("C:/Users/dibujoatm/Dropbox/R/Grecolatino.txt", header=T)
Respuesta = Grecolatino$desgaste
Bloque1 = as.factor(Grecolatino$carro) #IMPORTANTE PONER EL BLOQUE COMO FACTOR!!!
Bloque2 = as.factor(Grecolatino$posicion) #IMPORTANTE PONER EL BLOQUE COMO FACTOR!!!
Bloque3 = as.factor(Grecolatino$conductor) #IMPORTANTE PONER EL BLOQUE COMO FACTOR!!!
Tratamiento = as.factor(Grecolatino$marca)
Data = data.frame(Bloque1, Tratamiento, Bloque3, Bloque2, Respuesta)
View(Data)
Data = data.frame(Bloque1, Tratamiento, Bloque3, Bloque2, Respuesta)
plotmeans(Respuesta ~ Tratamiento, data=Data, main="Main Effects Plot (Data Means)")
results = lm(Respuesta ~ Tratamiento + Bloque1 + Bloque2 + Bloque3, data=Data)
anova(results)
library(gplots)
folletos <- read.delim("C:/Users/dibujoatm/Dropbox/R/Folletos.txt")
folletos
folletos2 <- stack(folletos)
subject = rep(folletos$Diseño,4)
folletos2[3] = subject
colnames(folletos2) = c("respuesta", "región", "diseño")
plotmeans(respuesta ~ diseño, data=folletos2, main="Main Effects Plot (data means)", las=2, xlab=" ", ylab="Respuestas", barcol="black")
aov.out = aov(respuesta ~ diseño + región, data=folletos2)
summary(aov.out)
library(agricolae)
LSD.test(folletos2$respuesta, folletos2$diseño, 6, 906, console=TRUE)
layout(matrix(c(1,2),1,2)) # optional layout
plot(aov.out, which = c(1,2)) # diagnostic plots
dia <- c(rep("dia1",1), rep("dia2",1), rep("dia3",1), rep("dia4",1), rep("dia5",1))
lote <- c(rep("lote1",5), rep("lote2",5), rep("lote3",5), rep("lote4",5), rep("lote5",5))
ingredientes <- c("A","B","D","C","E","C","E","A","D","B","B","A","C","E","D","D","C","E","B","A","E","D","B","A","C")
tiempo <- c(8,7,1,7,3,11,2,7,3,8,4,9,10,1,5,6,8,6,6,10,4,2,3,8,8)
data <- data.frame(lote, dia, seed, tiempo)
aov.out = aov(tiempo ~ lote + dia + seed, data=data)
dia <- c(rep("dia1",1), rep("dia2",1), rep("dia3",1), rep("dia4",1), rep("dia5",1))
lote <- c(rep("lote1",5), rep("lote2",5), rep("lote3",5), rep("lote4",5), rep("lote5",5))
ingredientes <- c("A","B","D","C","E","C","E","A","D","B","B","A","C","E","D","D","C","E","B","A","E","D","B","A","C")
tiempo <- c(8,7,1,7,3,11,2,7,3,8,4,9,10,1,5,6,8,6,6,10,4,2,3,8,8)
dia <- c(rep("dia1",1), rep("dia2",1), rep("dia3",1), rep("dia4",1), rep("dia5",1))
lote <- c(rep("lote1",5), rep("lote2",5), rep("lote3",5), rep("lote4",5), rep("lote5",5))
ingredientes <- c("A","B","D","C","E","C","E","A","D","B","B","A","C","E","D","D","C","E","B","A","E","D","B","A","C")
tiempo <- c(8,7,1,7,3,11,2,7,3,8,4,9,10,1,5,6,8,6,6,10,4,2,3,8,8)
data <- data.frame(lote, dia, ingredientes, tiempo)
aov.out = aov(tiempo ~ lote + dia + ingrediente, data=data)
summary(aov.out)
dia <- c(rep("dia1",1), rep("dia2",1), rep("dia3",1), rep("dia4",1), rep("dia5",1))
lote <- c(rep("lote1",5), rep("lote2",5), rep("lote3",5), rep("lote4",5), rep("lote5",5))
ingredientes <- c("A","B","D","C","E","C","E","A","D","B","B","A","C","E","D","D","C","E","B","A","E","D","B","A","C")
tiempo <- c(8,7,1,7,3,11,2,7,3,8,4,9,10,1,5,6,8,6,6,10,4,2,3,8,8)
dia <- c(rep("dia1",1), rep("dia2",1), rep("dia3",1), rep("dia4",1), rep("dia5",1))
lote <- c(rep("lote1",5), rep("lote2",5), rep("lote3",5), rep("lote4",5), rep("lote5",5))
ingredientes <- c("A","B","D","C","E","C","E","A","D","B","B","A","C","E","D","D","C","E","B","A","E","D","B","A","C")
tiempo <- c(8,7,1,7,3,11,2,7,3,8,4,9,10,1,5,6,8,6,6,10,4,2,3,8,8)
data <- data.frame(lote, dia, ingredientes, tiempo)
aov.out = aov(tiempo ~ lote + dia + ingredientes, data=data)
summary(aov.out)
dia <- c(rep("con1",1), rep("con2",1), rep("con3",1), rep("con4",1), rep("con5",1))
lote <- c(rep("lote1",5), rep("lote2",5), rep("lote3",5), rep("lote4",5), rep("lote5",5))
tiempo <- c("A","B","C","D","E","B","C","D","E","A","C","D","E","A","B","D","E","A","B","C","E","A","B","C","D")
catalizador <- c("a","b","y","d","e","y","d","e","a","b","e","a","b","y","d","b","y","d","e","a","d","e","a","b","y")
rendimiento <- c(26,16,19,16,13,18,21,18,11,21,20,12,16,25,13,15,15,22,14,17,10,24,17,17,14)
data <- data.frame(lote, dia, tiempo, catalizador, rendimiento)
aov.out = aov(rendimiento ~ lote + dia + tiempo + catalizador, data=data)
summary(aov.out)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
language="en"
searchTerms=c("bridal shower decorations","Accent Pillow with Heart Design - Red/Black")
if(is.null(searchTerms)) stop("Please enter search terms!")
if(!any(language==c("de","en"))) stop("Please enter correct
language (de, en)!")
require(RCurl)
entry <- paste(searchTerms, collapse="+")
entry
siteHTML <- getForm("http://www.google.com/search",
hl=language, lr="", q=entry,
btnG="Search")
siteHTML
if(language=="de") indicatorWord <- "ungefähr" else
indicatorWord <- "of about"
posExtractStart <- gregexpr(indicatorWord, siteHTML,
fixed = TRUE)[[1]]
stringExtract <- substring(siteHTML, first=posExtractStart,
last = posExtractStart + 30)
posExtractStart
stringExtract
posResults <- gregexpr('<b>[0-9.,]{1,20}</b>', stringExtract)
posResults
posFirst <- posResults[[1]][1]
textLength  <- attributes(posResults[[1]])$match.length
stringExtract <- substring(stringExtract, first=posFirst,
last = posFirst + textLength)
matchCount <- as.numeric(gsub("[^0-9]", "", stringExtract))
?gregexpr
if(language=="de") indicatorWord <- "ungefähr" else
indicatorWord <- "About"
posExtractStart <- gregexpr(indicatorWord, siteHTML,
fixed = TRUE)[[1]]
posExtractStart
siteHTML <- getForm("http://www.google.com/search",
hl=language, lr="", q=entry,
btnG="Search")
siteHTML
?getForm
getGoogleCount <- function(searchTerms=NULL, language="en", ...){
require(RCurl)
entry    <- paste(searchTerms, collapse="+")
siteHTML <- getForm("http://www.google.com/search",
hl=language, lr="", q=entry,
btnG="Search")
require(RCurl)
searchTerms=Nc("bridal shower decorations","Accent Pillow with Heart Design - Red/Black")
searchTerms=c("bridal shower decorations","Accent Pillow with Heart Design - Red/Black")
searchTerms
language="en"
require(RCurl)
entry    <- paste(searchTerms, collapse="+")
siteHTML <- getForm("http://www.google.com/search",
hl=language, lr="", q=entry,
btnG="Search")
write.table(siteHTML, file="tmp google.txt")
indicatorWord <- "resultStats"
posExtractStart <- gregexpr(indicatorWord, siteHTML,
fixed = TRUE)[[1]]
stringExtract <- as.character(substring(siteHTML, first=posExtractStart[2]-30,
last = posExtractStart[2] +50 ))
count <- strsplit(stringExtract, 'resultStats')[[1]][2]
count <- strsplit(count, split='results')[[1]][1]
count <- strsplit(count, split='>')[[1]][2]
if(length(strsplit(count, split=" ")[[1]])==2){
count <- strsplit(count, split=" ")[[1]][2]
}
count <- as.numeric(gsub(",", "", count))
return(count)
}
getGoogleCount <- function(searchTerms=NULL, language="en", ...){
require(RCurl)
entry    <- paste(searchTerms, collapse="+")
siteHTML <- getForm("http://www.google.com/search",
hl=language, lr="", q=entry,
btnG="Search")
posExtractStart <- gregexpr(indicatorWord, siteHTML,
stringExtract <- as.character(substring(siteHTML, first=posExtractStart[2]-30,
fixed = TRUE)[[1]]
write.table(siteHTML, file="tmp google.txt")
indicatorWord <- "resultStats"
last = posExtractStart[2] +50 ))
count <- strsplit(stringExtract, 'resultStats')[[1]][2]
count <- strsplit(count, split='results')[[1]][1]
stringExtract <- as.character(substring(siteHTML, first=posExtractStart[2]-30,
last = posExtractStart[2] +50 ))
if(is.null(searchTerms)) stop("Please enter search terms!")
if(!any(language==c("de","en"))) stop("Please enter correct
language (de, en)!")
require(RCurl)
entry <- paste(searchTerms, collapse="+")
entry
siteHTML <- getForm("http://www.google.com/search",
hl=language, lr="", q=entry,
btnG="Search")
siteHTML
getURL("http://www.google.com/search?hl=en&lr=&ie=ISO-8859-1&q=RCurl&btnG=Search")
getForm("http://www.google.com/search", hl="en", lr="", ie="ISO-8859-1",  q="RCurl", btnG="Search")
siteHTML <- getForm("http://www.google.com/search", hl="en", lr="", ie="ISO-8859-1",  q="RCurl", btnG="Search")
indicatorWord <- "of about"
posExtractStart <- gregexpr(indicatorWord, siteHTML,
fixed = TRUE)[[1]]
indicatorWord <- "About"
posExtractStart <- gregexpr(indicatorWord, siteHTML,
fixed = TRUE)[[1]]
posResults <- gregexpr('<b>[0-9.,]{1,20}</b>', stringExtract)
install.packages("rga")
?RGA
install.packages("RGA")
rga.open(instance="ga")
library(RGA)
rga.open(instance="ga")
rga.open(instance="ga")
RGA.open(instance="ga")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))<br> rga.open(instance="ga")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))<br> rga.open(instance="ga")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
rga.open(instance="ga")
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
rga.open(instance="ga")
authorize()
install.packages("RSelenium")
library(RSelenium)
library(RSelenium)
checkForServer()
checkForServer()
startServer()
remDrv <- remoteDriver()
remDrv$open()
remDrv$navigate('http://www.google.com/')
remDrv$findElement(using = "xpath", "//input[@id = 'lst-ib']")$sendKeysToElement(list(entry))
remDrv$findElement(using = "xpath", "//submit[@name ='btnG']")$clickElement()
remDrv$findElement(using = "xpath", "//button[@name ='btnG']")$clickElement()
library(ggmap)
require(XML)
bus_routes_doc <- htmlParse("http://mty.rutadirecta.com/")
bus_routes_root <- xmlRoot(bus_routes_doc)
bus_routes <- xpathSApply(bus_routes_root, "//*[@class='ruta']", xmlValue)
bus_routes_root
bus_html <- xpathSApply(bus_routes_root, "//*[@href]", xmlValue)
bus_html}
bus_html
bus_routes_root
bus_html <- xpathSApply(bus_routes_root, "//table/..//a", xmlGetAttr, "href")
bus_html
bus_routes_root
bus_html <- xpathSApply(bus_routes_root, "//table//a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "//table/a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "//*//a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "//a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "//a", xmlGetAttr, "href")
bus_html
bus_html <- xpathSApply(bus_routes_root, "/a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "//a", xmlGetAttr, "href")
bus_routes_root
bus_html <- xpathSApply(bus_routes_root, "/.//a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "/.//a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "/.//./a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "/.//././a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "/.//*", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "/.//a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "/a", xmlGetAttr, "href")
bus_html <- xpathSApply(bus_routes_root, "//a", xmlGetAttr, "href")
bus_html
bus_html <- bus_html[26:349]
businfo <- as.datafram(bus_routes,bus_html)
businfo <- as.dataframe(bus_routes,bus_html)
businfo <- dataframe(bus_routes,bus_html)
businfo <- data.frame(bus_routes,bus_html)
View(businfo)
require(RJSONIO)
require(jsonlite)
library(ggmap)
library(XML)
library(RJSONIO)
library(jsonlite)
url <- bus_html[1]
url
aver <- readLines(url)
aver
source('~/.active-rstudio-document')
?fromJSON
document <- fromJSON(file=url, method='C')
document <- fromJSON(file=url, method='C')
document <- fromJSON(file=url)
document <- fromJSON(url)
?fromJSON
document <- fromJSON(file=url)
document <- fromJSON(txt=url)
library(RCurl)
View(businfo)
data <- read.csv("activity.csv")
head(data,5)
library(plyr)
library(ggplot2)
#Remove missing values from dataset
#Calculate the total number of steps taken per day
data_without_na <- na.omit(data)
head(total_steps_per_day,5)
total_steps_per_day <- ddply(data_without_na,"date",summarise,steps=sum(steps))
#Histogram of the total number of steps taken each day
qplot(steps, data=total_steps_per_day, geom="histogram")
#Calculate mean and median
mean_steps <- mean(total_steps_per_day$steps)
median_steps <- median(total_steps_per_day$steps)
data <- read.csv("activity.csv")
setwd("C:/Users/dibujoatm/Dropbox/CourseraPeer1/RepData_PeerAssessment1")
data <- read.csv("activity.csv")
head(data,5)
library(plyr)
library(ggplot2)
#Remove missing values from dataset
data_without_na <- na.omit(data)
#Calculate the total number of steps taken per day
total_steps_per_day <- ddply(data_without_na,"date",summarise,steps=sum(steps))
head(total_steps_per_day,5)
#Histogram of the total number of steps taken each day
qplot(steps, data=total_steps_per_day, geom="histogram")
#Calculate mean and median
mean_steps <- mean(total_steps_per_day$steps)
median_steps <- median(total_steps_per_day$steps)
mean_steps
round(mean_steps)
mean_steps <- round(mean_steps)
?qplot
qplot(steps, data=total_steps_per_day, geom="histogram")
qplot(steps, data=total_steps_per_day, geom="histogram", xlab = "Number of steps", ylab = "Frecunecy")
?qplot
qplot(steps, data=total_steps_per_day, geom="histogram", xlab = "Number of steps", ylab = "Frecunecy", main = "Total number of steps taken each day")
average_steps_per_interval <- ddply(data_without_na,"interval",summarise,steps=mean(steps))
head(average_steps_per_interval,5)
x <- average_steps_per_interval$interval
y <- average_steps_per_interval$steps
qplot(x, y, data=average_steps_per_interval, geom="path")
qplot(x, y, data=average_steps_per_interval, geom="path", xlab = "Time interval", ylab = "Average number of steps", main = "Average number of steps taken per interval")
index <- which.max(average_steps_per_interval$steps)
max_minute_interval <- average_steps_per_interval$interval[index]
average_steps_per_interval$interval
View(average_steps_per_interval)
mean_steps
data <- read.csv("activity.csv")
head(data,5)
```
###2. What is mean total number of steps taken per day?
For this part of the assignment, you can ignore the missing values in the dataset.
1. Calculate the total number of steps taken per day
2. If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
3. Calculate and report the mean and median of the total number of steps taken per day
```{r, echo=TRUE}
#Load packages
library(plyr)
library(ggplot2)
#Remove missing values from dataset
data_without_na <- na.omit(data)
#Calculate the total number of steps taken per day
total_steps_per_day <- ddply(data_without_na,"date",summarise,steps=sum(steps))
head(total_steps_per_day,5)
#Histogram of the total number of steps taken each day
qplot(steps, data=total_steps_per_day, geom="histogram", xlab = "Number of steps", ylab = "Frecunecy", main = "Total number of steps taken each day")
#Calculate mean and median
mean_steps <- round(mean(total_steps_per_day$steps))
median_steps <- median(total_steps_per_day$steps)
```
Mean: `r mean_steps`
Median: Mean: `r median_steps`
###3. What is the average daily activity pattern?
1. Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r, echo=TRUE}
#Calculate the average number of steps taken per interval
average_steps_per_interval <- ddply(data_without_na,"interval",summarise,steps=mean(steps))
head(average_steps_per_interval,5)
x <- average_steps_per_interval$interval
y <- average_steps_per_interval$steps
#Time series plot of average number of steps and time interval
qplot(x, y, data=average_steps_per_interval, geom="path", xlab = "Time interval", ylab = "Average number of steps", main = "Average number of steps taken per interval")
#Interval with maximum number of steps
index <- which.max(average_steps_per_interval$steps)
max_minute_interval <- average_steps_per_interval$interval[index]
```
total_NAs <- length(which(is.na(data)))
data_with_na <- data[which(is.na(data)),]
View(data_with_na)
data_with_na$steps <- NULL
newdata <- merge(data_with_na,average_steps_per_interval,by="interval")
newdata$steps <- round(newdata$steps)
data <- rbind(newdata, data_without_na)
data_without_na <- data[order(as.Date(data$date, format="%Y-%m-%d")),]
total_steps_per_day <- ddply(data_without_na,"date",summarise,steps=sum(steps))
head(total_steps_per_day,5)
qplot(steps, data=total_steps_per_day, geom="histogram")
View(newdata)
View(data)
View(data_without_na)
View(data_without_na)
?weekdayt
?weekday
?weekdays
View(data_without_na)
data_without_na$day <- weekdays(data_without_na$date)
data_without_na$day <- weekdays(as.Date(data_without_na$date, format="%Y-%m-%d"))
View(data_without_na)
weekend <- c("Sabado", "Domingo")
data_without_na$day = as.factor(ifelse(is.element(weekdays(as.Date(data_without_na$date, format="%Y-%m-%d")),weekend), "weekend", "weekday"))
View(data_without_na)
data_without_na$day+
data_without_na$day
weekdays(as.Date(data_without_na$date, format="%Y-%m-%d"))
weekend <- c("sábado", "domingo")
data_without_na$day = as.factor(ifelse(is.element(weekdays(as.Date(data_without_na$date, format="%Y-%m-%d")),weekend), "weekend", "weekday"))
data_without_na$day
View(data_without_na)
average_steps_per_interval <- ddply(data_without_na,"interval",summarise,steps=mean(steps))
View(average_steps_per_interval)
?ddply
View(data_without_na)
average_steps_per_interval <- ddply(data_without_na,c("interval","day"),summarise,steps=mean(steps))
View(average_steps_per_interval)
View(average_steps_per_interval)
ggplot(average_steps_per_interval, aes(interval,steps)) + facet_wrap(~day, scales="free")
average_steps_per_interval <- ddply(data_without_na,c("interval","day"),summarise,steps=mean(steps))
ggplot(average_steps_per_interval, aes(interval,steps)) + facet_wrap(~day, scales="free")
average_steps_per_interval
View(average_steps_per_interval)
ggplot(average_steps_per_interval, aes(interval,steps)) + facet_wrap(~day)
ggplot(average_steps_per_interval, aes(interval,steps)) + facet_grid(day~interval)
ggplot(average_steps_per_interval, aes(interval,steps))
View(average_steps_per_interval)
ggplot(average_steps_per_interval, aes(day,steps))
qplot(average_steps_per_interval, aes(day,steps))
qplot(average_steps_per_interval, aes(interval,steps))
View(average_steps_per_interval)
qplot(interval, steps, data=average_steps_per_interval, facets = day~.)
qplot(interval, steps, data=average_steps_per_interval, facets = day~., xlab = "Time interval", ylab = "Average number of steps", main = "Average number of steps taken per interval")
qplot(interval, steps, data=average_steps_per_interval, facets = day~., geom="l", xlab = "Time interval", ylab = "Average number of steps", main = "Average number of steps taken per interval")
qplot(interval, steps, data=average_steps_per_interval, facets = day~., geom=line, xlab = "Time interval", ylab = "Average number of steps", main = "Average number of steps taken per interval")
qplot(interval, steps, data=average_steps_per_interval, facets = day~., geom= "line"", xlab = "Time interval", ylab = "Average number of steps", main = "Average number of steps taken per interval")
qplot(interval, steps, data=average_steps_per_interval, facets = day~., geom= "line", xlab = "Time interval", ylab = "Average number of steps", main = "Average number of steps taken per interval")
?round
trunc(mean_steps)
